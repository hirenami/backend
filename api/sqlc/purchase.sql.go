// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: purchase.sql

package sqlc

import (
	"context"
)

const getPurchase = `-- name: GetPurchase :one
SELECT purchaseid, userid, listingid, created_at, status from purchase
WHERE purchaseId = ?
`

func (q *Queries) GetPurchase(ctx context.Context, purchaseid int32) (Purchase, error) {
	row := q.db.QueryRowContext(ctx, getPurchase, purchaseid)
	var i Purchase
	err := row.Scan(
		&i.Purchaseid,
		&i.Userid,
		&i.Listingid,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const getUserPurchases = `-- name: GetUserPurchases :many
SELECT purchaseid, userid, listingid, created_at, status from purchase
WHERE userId = ?
`

func (q *Queries) GetUserPurchases(ctx context.Context, userid string) ([]Purchase, error) {
	rows, err := q.db.QueryContext(ctx, getUserPurchases, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Purchase{}
	for rows.Next() {
		var i Purchase
		if err := rows.Scan(
			&i.Purchaseid,
			&i.Userid,
			&i.Listingid,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
