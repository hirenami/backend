// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type DmsStatus string

const (
	DmsStatusUnread DmsStatus = "unread"
	DmsStatusRead   DmsStatus = "read"
)

func (e *DmsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DmsStatus(s)
	case string:
		*e = DmsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DmsStatus: %T", src)
	}
	return nil
}

type NullDmsStatus struct {
	DmsStatus DmsStatus `json:"dms_status"`
	Valid     bool      `json:"valid"` // Valid is true if DmsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDmsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DmsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DmsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDmsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DmsStatus), nil
}

type NotificationsStatus string

const (
	NotificationsStatusUnread NotificationsStatus = "unread"
	NotificationsStatusRead   NotificationsStatus = "read"
)

func (e *NotificationsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NotificationsStatus(s)
	case string:
		*e = NotificationsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for NotificationsStatus: %T", src)
	}
	return nil
}

type NullNotificationsStatus struct {
	NotificationsStatus NotificationsStatus `json:"notifications_status"`
	Valid               bool                `json:"valid"` // Valid is true if NotificationsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNotificationsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.NotificationsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NotificationsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNotificationsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NotificationsStatus), nil
}

type Block struct {
	Blockerid string    `json:"blockerid"`
	Blockedid string    `json:"blockedid"`
	Createdat time.Time `json:"createdat"`
}

type Dm struct {
	Dmsid      int32          `json:"dmsid"`
	Senderid   string         `json:"senderid"`
	Receiverid string         `json:"receiverid"`
	Createdat  time.Time      `json:"createdat"`
	Content    string         `json:"content"`
	MediaUrl   sql.NullString `json:"media_url"`
	Status     NullDmsStatus  `json:"status"`
}

type Follow struct {
	Followerid  string    `json:"followerid"`
	Followingid string    `json:"followingid"`
	Createdat   time.Time `json:"createdat"`
}

type Hashtag struct {
	Hashtagid int32  `json:"hashtagid"`
	Hashtag   string `json:"hashtag"`
	Tweetid   int32  `json:"tweetid"`
}

type Keyfollow struct {
	Followerid  string    `json:"followerid"`
	Followingid string    `json:"followingid"`
	Createdat   time.Time `json:"createdat"`
}

type Like struct {
	Userid    string    `json:"userid"`
	Tweetid   int32     `json:"tweetid"`
	Createdat time.Time `json:"createdat"`
}

type Notification struct {
	Notificationsid int32                   `json:"notificationsid"`
	Senderid        string                  `json:"senderid"`
	Replyid         string                  `json:"replyid"`
	Type            string                  `json:"type"`
	Createdat       time.Time               `json:"createdat"`
	Status          NullNotificationsStatus `json:"status"`
	Contentid       sql.NullInt32           `json:"contentid"`
}

type Relation struct {
	Tweetid int32 `json:"tweetid"`
	Replyid int32 `json:"replyid"`
}

type Tweet struct {
	Tweetid     int32          `json:"tweetid"`
	Userid      string         `json:"userid"`
	Retweetid   sql.NullInt32  `json:"retweetid"`
	Isquote     sql.NullBool   `json:"isquote"`
	Isreply     sql.NullBool   `json:"isreply"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	Content     string         `json:"content"`
	MediaUrl    sql.NullString `json:"media_url"`
	Likes       int32          `json:"likes"`
	Retweets    int32          `json:"retweets"`
	Replies     int32          `json:"replies"`
	Impressions int32          `json:"impressions"`
	Isdeleted   sql.NullBool   `json:"isdeleted"`
}

type User struct {
	Firebaseuid string         `json:"firebaseuid"`
	Userid      string         `json:"userid"`
	Username    string         `json:"username"`
	CreatedAt   time.Time      `json:"created_at"`
	HeaderImage string         `json:"header_image"`
	IconImage   string         `json:"icon_image"`
	Biography   sql.NullString `json:"biography"`
	Isprivate   bool           `json:"isprivate"`
	Isfrozen    bool           `json:"isfrozen"`
	Isdeleted   bool           `json:"isdeleted"`
	Isadmin     bool           `json:"isadmin"`
}
