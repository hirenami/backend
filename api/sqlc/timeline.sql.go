// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: timeline.sql

package sqlc

import (
	"context"
)

const timeline = `-- name: Timeline :many
SELECT tweetid, userid, retweetid, isquote, isreply, review, created_at, updated_at, content, media_url, likes, retweets, replies, impressions, isdeleted FROM tweets
WHERE userId IN (
	SELECT followerId FROM follows
	WHERE follows.followingId = ?
) AND isDeleted = false AND isReply = false
UNION ALL
SELECT tweetid, userid, retweetid, isquote, isreply, review, created_at, updated_at, content, media_url, likes, retweets, replies, impressions, isdeleted FROM tweets 
WHERE 
    isDeleted = FALSE
	AND isReply = FALSE
    AND created_at >= NOW() - INTERVAL 5 DAY
    AND userId NOT IN (
        SELECT followerId FROM follows WHERE follows.followingId = ?
    )
ORDER BY
	created_at DESC,
    likes + 2 * retweets DESC
LIMIT 100
`

type TimelineParams struct {
	Followingid   string `json:"followingid"`
	Followingid_2 string `json:"followingid_2"`
}

func (q *Queries) Timeline(ctx context.Context, arg TimelineParams) ([]Tweet, error) {
	rows, err := q.db.QueryContext(ctx, timeline, arg.Followingid, arg.Followingid_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tweet{}
	for rows.Next() {
		var i Tweet
		if err := rows.Scan(
			&i.Tweetid,
			&i.Userid,
			&i.Retweetid,
			&i.Isquote,
			&i.Isreply,
			&i.Review,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Content,
			&i.MediaUrl,
			&i.Likes,
			&i.Retweets,
			&i.Replies,
			&i.Impressions,
			&i.Isdeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
