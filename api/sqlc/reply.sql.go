// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reply.sql

package sqlc

import (
	"context"
)

const countReplies = `-- name: CountReplies :one
SELECT replies FROM tweets
WHERE tweetId = ?
`

func (q *Queries) CountReplies(ctx context.Context, tweetid int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, countReplies, tweetid)
	var replies int32
	err := row.Scan(&replies)
	return replies, err
}

const createReply = `-- name: CreateReply :exec
INSERT INTO tweets (
	userId, isReply, content, media_url
) VALUES (
	?, true, ?, ?
)
`

type CreateReplyParams struct {
	Userid   string `json:"userid"`
	Content  string `json:"content"`
	MediaUrl string `json:"media_url"`
}

func (q *Queries) CreateReply(ctx context.Context, arg CreateReplyParams) error {
	_, err := q.db.ExecContext(ctx, createReply, arg.Userid, arg.Content, arg.MediaUrl)
	return err
}

const getLastInsertID = `-- name: GetLastInsertID :one
SELECT LAST_INSERT_ID() AS tweetId
`

func (q *Queries) GetLastInsertID(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLastInsertID)
	var tweetid int64
	err := row.Scan(&tweetid)
	return tweetid, err
}

const getRepliesToTweet = `-- name: GetRepliesToTweet :many
SELECT replyId FROM relations
WHERE tweetId = ? ORDER BY created_at DESC
`

func (q *Queries) GetRepliesToTweet(ctx context.Context, tweetid int32) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getRepliesToTweet, tweetid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var replyid int32
		if err := rows.Scan(&replyid); err != nil {
			return nil, err
		}
		items = append(items, replyid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTweetRepliedTo = `-- name: GetTweetRepliedTo :one
SELECT tweetId FROM relations
WHERE replyId = ?
`

func (q *Queries) GetTweetRepliedTo(ctx context.Context, replyid int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getTweetRepliedTo, replyid)
	var tweetid int32
	err := row.Scan(&tweetid)
	return tweetid, err
}

const getUsersReplies = `-- name: GetUsersReplies :many
SELECT tweetid, userid, retweetid, isquote, isreply, isreview, created_at, updated_at, content, media_url, likes, retweets, replies, impressions, isdeleted FROM tweets 
WHERE userId = ? and isReply = true ORDER BY createdAt DESC
`

func (q *Queries) GetUsersReplies(ctx context.Context, userid string) ([]Tweet, error) {
	rows, err := q.db.QueryContext(ctx, getUsersReplies, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tweet{}
	for rows.Next() {
		var i Tweet
		if err := rows.Scan(
			&i.Tweetid,
			&i.Userid,
			&i.Retweetid,
			&i.Isquote,
			&i.Isreply,
			&i.Isreview,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Content,
			&i.MediaUrl,
			&i.Likes,
			&i.Retweets,
			&i.Replies,
			&i.Impressions,
			&i.Isdeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isReplyExists = `-- name: IsReplyExists :one
SELECT EXISTS (
	SELECT 1 
	FROM relations
	WHERE replyId = ?
)
`

func (q *Queries) IsReplyExists(ctx context.Context, replyid int32) (bool, error) {
	row := q.db.QueryRowContext(ctx, isReplyExists, replyid)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const minusOneReply = `-- name: MinusOneReply :exec
UPDATE tweets SET replies = replies - 1
WHERE tweetId = ?
`

func (q *Queries) MinusOneReply(ctx context.Context, tweetid int32) error {
	_, err := q.db.ExecContext(ctx, minusOneReply, tweetid)
	return err
}

const plusOneReply = `-- name: PlusOneReply :exec
UPDATE tweets SET replies = replies + 1
WHERE tweetId = ?
`

func (q *Queries) PlusOneReply(ctx context.Context, tweetid int32) error {
	_, err := q.db.ExecContext(ctx, plusOneReply, tweetid)
	return err
}

const relateReplyToTweet = `-- name: RelateReplyToTweet :exec
INSERT INTO relations (
	tweetId, replyId
) VALUES (
	?, ?
)
`

type RelateReplyToTweetParams struct {
	Tweetid int32 `json:"tweetid"`
	Replyid int32 `json:"replyid"`
}

func (q *Queries) RelateReplyToTweet(ctx context.Context, arg RelateReplyToTweetParams) error {
	_, err := q.db.ExecContext(ctx, relateReplyToTweet, arg.Tweetid, arg.Replyid)
	return err
}

const unrelateReplyToTweet = `-- name: UnrelateReplyToTweet :exec
DELETE FROM relations
WHERE tweetId = ? AND replyId = ?
`

type UnrelateReplyToTweetParams struct {
	Tweetid int32 `json:"tweetid"`
	Replyid int32 `json:"replyid"`
}

func (q *Queries) UnrelateReplyToTweet(ctx context.Context, arg UnrelateReplyToTweetParams) error {
	_, err := q.db.ExecContext(ctx, unrelateReplyToTweet, arg.Tweetid, arg.Replyid)
	return err
}
