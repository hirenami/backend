// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: dms.sql

package sqlc

import (
	"context"
)

const createDm = `-- name: CreateDm :exec
INSERT INTO
    dms (
        senderId,
        receiverId,
        content,
        media_url
    )
VALUES (?, ?, ?, ?)
`

type CreateDmParams struct {
	Senderid   string `json:"senderid"`
	Receiverid string `json:"receiverid"`
	Content    string `json:"content"`
	MediaUrl   string `json:"media_url"`
}

func (q *Queries) CreateDm(ctx context.Context, arg CreateDmParams) error {
	_, err := q.db.ExecContext(ctx, createDm,
		arg.Senderid,
		arg.Receiverid,
		arg.Content,
		arg.MediaUrl,
	)
	return err
}

const deleteDm = `-- name: DeleteDm :exec
DELETE FROM dms WHERE dmsId = ?
`

func (q *Queries) DeleteDm(ctx context.Context, dmsid int32) error {
	_, err := q.db.ExecContext(ctx, deleteDm, dmsid)
	return err
}

const getAllDms = `-- name: GetAllDms :many
SELECT
    dmsId,
    senderId,
    receiverId,
    createdAt,
    content,
    media_url,
    status
FROM dms
WHERE
    senderId = ?
    OR receiverId = ?
ORDER BY createdAt DESC
`

type GetAllDmsParams struct {
	Senderid   string `json:"senderid"`
	Receiverid string `json:"receiverid"`
}

func (q *Queries) GetAllDms(ctx context.Context, arg GetAllDmsParams) ([]Dm, error) {
	rows, err := q.db.QueryContext(ctx, getAllDms, arg.Senderid, arg.Receiverid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dm{}
	for rows.Next() {
		var i Dm
		if err := rows.Scan(
			&i.Dmsid,
			&i.Senderid,
			&i.Receiverid,
			&i.Createdat,
			&i.Content,
			&i.MediaUrl,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDm = `-- name: GetDm :one
SELECT dmsid, senderid, receiverid, createdat, content, media_url, status FROM dms WHERE dmsId = ?
`

func (q *Queries) GetDm(ctx context.Context, dmsid int32) (Dm, error) {
	row := q.db.QueryRowContext(ctx, getDm, dmsid)
	var i Dm
	err := row.Scan(
		&i.Dmsid,
		&i.Senderid,
		&i.Receiverid,
		&i.Createdat,
		&i.Content,
		&i.MediaUrl,
		&i.Status,
	)
	return i, err
}

const getDms = `-- name: GetDms :many
SELECT dmsid, senderid, receiverid, createdat, content, media_url, status
FROM dms
WHERE (
        senderId = ?
        AND receiverId = ?
    )
    OR (
        senderId = ?
        AND receiverId = ?
    )
ORDER BY createdAt ASC
`

type GetDmsParams struct {
	Senderid     string `json:"senderid"`
	Receiverid   string `json:"receiverid"`
	Senderid_2   string `json:"senderid_2"`
	Receiverid_2 string `json:"receiverid_2"`
}

func (q *Queries) GetDms(ctx context.Context, arg GetDmsParams) ([]Dm, error) {
	rows, err := q.db.QueryContext(ctx, getDms,
		arg.Senderid,
		arg.Receiverid,
		arg.Senderid_2,
		arg.Receiverid_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dm{}
	for rows.Next() {
		var i Dm
		if err := rows.Scan(
			&i.Dmsid,
			&i.Senderid,
			&i.Receiverid,
			&i.Createdat,
			&i.Content,
			&i.MediaUrl,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDmsUsers = `-- name: GetDmsUsers :many
SELECT DISTINCT
    CASE
        WHEN senderId = ? THEN receiverId
        ELSE senderId
    END AS otherUserId
FROM dms
WHERE
    senderId = ?
    OR receiverId = ?
`

type GetDmsUsersParams struct {
	Senderid   string `json:"senderid"`
	Senderid_2 string `json:"senderid_2"`
	Receiverid string `json:"receiverid"`
}

func (q *Queries) GetDmsUsers(ctx context.Context, arg GetDmsUsersParams) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, getDmsUsers, arg.Senderid, arg.Senderid_2, arg.Receiverid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []interface{}{}
	for rows.Next() {
		var otheruserid interface{}
		if err := rows.Scan(&otheruserid); err != nil {
			return nil, err
		}
		items = append(items, otheruserid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastMessages = `-- name: GetLastMessages :many
SELECT dmsid, senderid, receiverid, createdat, content, media_url, status
FROM dms
WHERE (
        senderId = ?
        AND receiverId = ?
    )
    OR (
        senderId = ?
        AND receiverId = ?
    )
ORDER BY createdAt DESC
LIMIT 1
`

type GetLastMessagesParams struct {
	Senderid     string `json:"senderid"`
	Receiverid   string `json:"receiverid"`
	Senderid_2   string `json:"senderid_2"`
	Receiverid_2 string `json:"receiverid_2"`
}

func (q *Queries) GetLastMessages(ctx context.Context, arg GetLastMessagesParams) ([]Dm, error) {
	rows, err := q.db.QueryContext(ctx, getLastMessages,
		arg.Senderid,
		arg.Receiverid,
		arg.Senderid_2,
		arg.Receiverid_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dm{}
	for rows.Next() {
		var i Dm
		if err := rows.Scan(
			&i.Dmsid,
			&i.Senderid,
			&i.Receiverid,
			&i.Createdat,
			&i.Content,
			&i.MediaUrl,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setDmStatus = `-- name: SetDmStatus :exec
UPDATE dms
SET
    status = 'read'
WHERE (
        senderId = ?
        AND receiverId = ?
    )
`

type SetDmStatusParams struct {
	Senderid   string `json:"senderid"`
	Receiverid string `json:"receiverid"`
}

func (q *Queries) SetDmStatus(ctx context.Context, arg SetDmStatusParams) error {
	_, err := q.db.ExecContext(ctx, setDmStatus, arg.Senderid, arg.Receiverid)
	return err
}
