// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: follows.sql

package sqlc

import (
	"context"
)

const countFollower = `-- name: CountFollower :one
SELECT COUNT(followingId) FROM follows WHERE followerId = ?
`

func (q *Queries) CountFollower(ctx context.Context, followerid string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countFollower, followerid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countFollowing = `-- name: CountFollowing :one
SELECT COUNT(followerId) FROM follows WHERE followingId = ?
`

func (q *Queries) CountFollowing(ctx context.Context, followingid string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countFollowing, followingid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createFollow = `-- name: CreateFollow :exec
INSERT follows (
	followerId, followingId
) VALUES (
	?, ?
)
`

type CreateFollowParams struct {
	Followerid  string `json:"followerid"`
	Followingid string `json:"followingid"`
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) error {
	_, err := q.db.ExecContext(ctx, createFollow, arg.Followerid, arg.Followingid)
	return err
}

const deleteFollow = `-- name: DeleteFollow :exec
DELETE FROM follows
WHERE followerId = ? AND followingId = ?
`

type DeleteFollowParams struct {
	Followerid  string `json:"followerid"`
	Followingid string `json:"followingid"`
}

func (q *Queries) DeleteFollow(ctx context.Context, arg DeleteFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFollow, arg.Followerid, arg.Followingid)
	return err
}

const getFollower = `-- name: GetFollower :many
SELECT followingId FROM follows WHERE followerId = ?
`

func (q *Queries) GetFollower(ctx context.Context, followerid string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFollower, followerid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var followingid string
		if err := rows.Scan(&followingid); err != nil {
			return nil, err
		}
		items = append(items, followingid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowing = `-- name: GetFollowing :many
SELECT followerId FROM follows WHERE followingId = ?
`

func (q *Queries) GetFollowing(ctx context.Context, followingid string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFollowing, followingid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var followerid string
		if err := rows.Scan(&followerid); err != nil {
			return nil, err
		}
		items = append(items, followerid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isFollowing = `-- name: IsFollowing :one
SELECT EXISTS (
	SELECT 1
	FROM follows
	WHERE followerId = ? AND followingId = ?
)
`

type IsFollowingParams struct {
	Followerid  string `json:"followerid"`
	Followingid string `json:"followingid"`
}

func (q *Queries) IsFollowing(ctx context.Context, arg IsFollowingParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isFollowing, arg.Followerid, arg.Followingid)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
