// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: listing.sql

package sqlc

import (
	"context"
)

const createListing = `-- name: CreateListing :exec
INSERT INTO listing (userId, tweetId, listingname, listingdescription, listingprice, type, stock, ` + "`" + `condition` + "`" + `)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateListingParams struct {
	Userid             string `json:"userid"`
	Tweetid            int32  `json:"tweetid"`
	Listingname        string `json:"listingname"`
	Listingdescription string `json:"listingdescription"`
	Listingprice       int32  `json:"listingprice"`
	Type               string `json:"type"`
	Stock              int32  `json:"stock"`
	Condition          string `json:"condition"`
}

func (q *Queries) CreateListing(ctx context.Context, arg CreateListingParams) error {
	_, err := q.db.ExecContext(ctx, createListing,
		arg.Userid,
		arg.Tweetid,
		arg.Listingname,
		arg.Listingdescription,
		arg.Listingprice,
		arg.Type,
		arg.Stock,
		arg.Condition,
	)
	return err
}

const getListing = `-- name: GetListing :one
SELECT listingid, userid, tweetid, created_at, listingname, listingdescription, ` + "`" + `condition` + "`" + `, listingprice, type, stock from listing
WHERE listingId = ?
`

func (q *Queries) GetListing(ctx context.Context, listingid int32) (Listing, error) {
	row := q.db.QueryRowContext(ctx, getListing, listingid)
	var i Listing
	err := row.Scan(
		&i.Listingid,
		&i.Userid,
		&i.Tweetid,
		&i.CreatedAt,
		&i.Listingname,
		&i.Listingdescription,
		&i.Condition,
		&i.Listingprice,
		&i.Type,
		&i.Stock,
	)
	return i, err
}

const getListingByTweet = `-- name: GetListingByTweet :one
SELECT listingid, userid, tweetid, created_at, listingname, listingdescription, ` + "`" + `condition` + "`" + `, listingprice, type, stock from listing
WHERE tweetId = ?
`

func (q *Queries) GetListingByTweet(ctx context.Context, tweetid int32) (Listing, error) {
	row := q.db.QueryRowContext(ctx, getListingByTweet, tweetid)
	var i Listing
	err := row.Scan(
		&i.Listingid,
		&i.Userid,
		&i.Tweetid,
		&i.CreatedAt,
		&i.Listingname,
		&i.Listingdescription,
		&i.Condition,
		&i.Listingprice,
		&i.Type,
		&i.Stock,
	)
	return i, err
}

const getUserListings = `-- name: GetUserListings :many
SELECT listingid, userid, tweetid, created_at, listingname, listingdescription, ` + "`" + `condition` + "`" + `, listingprice, type, stock from listing
WHERE userId = ?
`

func (q *Queries) GetUserListings(ctx context.Context, userid string) ([]Listing, error) {
	rows, err := q.db.QueryContext(ctx, getUserListings, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Listing{}
	for rows.Next() {
		var i Listing
		if err := rows.Scan(
			&i.Listingid,
			&i.Userid,
			&i.Tweetid,
			&i.CreatedAt,
			&i.Listingname,
			&i.Listingdescription,
			&i.Condition,
			&i.Listingprice,
			&i.Type,
			&i.Stock,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
