// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: blocks.sql

package sqlc

import (
	"context"
)

const createBlock = `-- name: CreateBlock :exec
INSERT INTO blocks (
	blockerId, blockedId
) VALUES (
	?, ?
)
`

type CreateBlockParams struct {
	Blockerid string `json:"blockerid"`
	Blockedid string `json:"blockedid"`
}

func (q *Queries) CreateBlock(ctx context.Context, arg CreateBlockParams) error {
	_, err := q.db.ExecContext(ctx, createBlock, arg.Blockerid, arg.Blockedid)
	return err
}

const deleteBlock = `-- name: DeleteBlock :exec
DELETE FROM blocks WHERE blockerId = ? AND blockedId = ?
`

type DeleteBlockParams struct {
	Blockerid string `json:"blockerid"`
	Blockedid string `json:"blockedid"`
}

func (q *Queries) DeleteBlock(ctx context.Context, arg DeleteBlockParams) error {
	_, err := q.db.ExecContext(ctx, deleteBlock, arg.Blockerid, arg.Blockedid)
	return err
}

const getBlocks = `-- name: GetBlocks :many
SELECT blockedId FROM blocks WHERE blockerId = ?
`

func (q *Queries) GetBlocks(ctx context.Context, blockerid string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getBlocks, blockerid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var blockedid string
		if err := rows.Scan(&blockedid); err != nil {
			return nil, err
		}
		items = append(items, blockedid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isBlocked = `-- name: IsBlocked :one
SELECT EXISTS (
	SELECT 1 
	FROM blocks 
	WHERE blockerId = ? AND blockedId = ?
)
`

type IsBlockedParams struct {
	Blockerid string `json:"blockerid"`
	Blockedid string `json:"blockedid"`
}

func (q *Queries) IsBlocked(ctx context.Context, arg IsBlockedParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isBlocked, arg.Blockerid, arg.Blockedid)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
