// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: like.sql

package sqlc

import (
	"context"
)

const checkLike = `-- name: CheckLike :many
SELECT userId FROM likes
WHERE tweetId = ?
`

func (q *Queries) CheckLike(ctx context.Context, tweetid int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, checkLike, tweetid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var userid string
		if err := rows.Scan(&userid); err != nil {
			return nil, err
		}
		items = append(items, userid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createLike = `-- name: CreateLike :exec
INSERT INTO likes (
	userId, tweetId
) VALUES (
	?, ?
)
`

type CreateLikeParams struct {
	Userid  string `json:"userid"`
	Tweetid int32  `json:"tweetid"`
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) error {
	_, err := q.db.ExecContext(ctx, createLike, arg.Userid, arg.Tweetid)
	return err
}

const deleteLike = `-- name: DeleteLike :exec
DELETE FROM likes
WHERE userId = ? AND tweetId = ?
`

type DeleteLikeParams struct {
	Userid  string `json:"userid"`
	Tweetid int32  `json:"tweetid"`
}

func (q *Queries) DeleteLike(ctx context.Context, arg DeleteLikeParams) error {
	_, err := q.db.ExecContext(ctx, deleteLike, arg.Userid, arg.Tweetid)
	return err
}

const getLikes = `-- name: GetLikes :one
SELECT likes FROM tweets
WHERE tweetId = ?
`

func (q *Queries) GetLikes(ctx context.Context, tweetid int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getLikes, tweetid)
	var likes int32
	err := row.Scan(&likes)
	return likes, err
}

const getUsersLikes = `-- name: GetUsersLikes :many
SELECT tweetId FROM likes
WHERE userId = ?
`

func (q *Queries) GetUsersLikes(ctx context.Context, userid string) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getUsersLikes, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var tweetid int32
		if err := rows.Scan(&tweetid); err != nil {
			return nil, err
		}
		items = append(items, tweetid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isLiked = `-- name: IsLiked :one
SELECT EXISTS (
	SELECT 1
	FROM likes
	WHERE userId = ? AND tweetId = ?
)
`

type IsLikedParams struct {
	Userid  string `json:"userid"`
	Tweetid int32  `json:"tweetid"`
}

func (q *Queries) IsLiked(ctx context.Context, arg IsLikedParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isLiked, arg.Userid, arg.Tweetid)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const minusLike = `-- name: MinusLike :exec
UPDATE tweets
SET likes = likes - 1
WHERE tweetId = ?
`

func (q *Queries) MinusLike(ctx context.Context, tweetid int32) error {
	_, err := q.db.ExecContext(ctx, minusLike, tweetid)
	return err
}

const plusLike = `-- name: PlusLike :exec
UPDATE tweets 
SET likes = likes + 1
WHERE tweetId = ?
`

func (q *Queries) PlusLike(ctx context.Context, tweetid int32) error {
	_, err := q.db.ExecContext(ctx, plusLike, tweetid)
	return err
}
